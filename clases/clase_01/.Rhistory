xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
download.file(
"https://raw.githubusercontent.com/daneden/animate.css/master/animate.css",
"animate.css"
)
xaringan:::inf_mr()
2+2+exp(3)
6* c(2,4,6)
c(5,2,1) + c(3,6,2)
x != y
#shortcut: alt + -
x <- 15
x
y <- 5
y
x + y
x == y
x != y
mi_objeto <- 200
sqrt(mi_objeto)* log(5)
operacion <- mi_objeto*2
operacion
#objetos serán diversos, ¿cuáles?
vector <- c(3,4,5)
vector*2
a <- 5
b <- a
a <- 4
b
seq (from =-3, to =6, by=1)
#ej: haga su secuencia
seq (from= -100, to=100, by=10)
#otras formas:
1:10 # cuando es lineal, de 1
rep(c(-1,0,1), times=5)
pares <-  seq(from =2, to=10, by=2)
pares
rep (pares, times=10)
rep (anios, each=12) # repite cada elemento
anios <- seq(from=2010, to=2022, by=1)
anios
rep (anios, each=12) # repite cada elemento
rep (anios, times=12) # repite toda la secuencia
#¿Cómo hacer lo siguiente?
# 2 2 3 4 4 4
rep (2:5, times = c(2, 1, 3,1))
sample(x= 20:50, size =56, replace = TRUE)
edades <- sample(x= 20:50, size =56, replace = TRUE)
min(edades)
max(edades)
which.min(edades) #donde está el menor elemento, posición
which.max(edades) #donde está el mayor elemento, posición
mean(edades)
var(edades) # varianza
sqrt(var(edades)) #desvio estandar
sd (edades) # es lo mismo que arriba
class(edades) # tipo de objeto
length(edades) # largo de objeto
unique(edades) # categoría de objetos
edades
edades [5] # rescatar posición 5
edades [edades <25] # de edades rescata los menores de 25
edades
edades [c(2, 10, 30)]
aprobacion_gobierno [4] #del penúltimo mes
aprobacion_gobierno <- c(20, 18, 38, 36, 38)
aprobacion_gobierno [4] #del penúltimo mes
aprobacion_gobierno [5] #del último mes
(aprobacion_gobierno [5] - aprobacion_gobierno [4])/ aprobacion_gobierno [4] *100
#cantidad de evaluaciones docentes en una universidad
sede_1 <-  c(80, 90, 50, 40, 35)
sede_2 <-  c(75, 68, 50, 90, 98)
dias_encuestas <-  c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes")
sede_1 <-  c(80, 90, 50, 40, 35)
sede_2 <-  c(75, 68, 50, 90, 98)
dias_encuestas <-  c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes")
dias_encuestas [3]
#asignar etiquetas a un vector indefinido
names(sede_1) <- dias_encuestas
sede_1
#¿Cuántas encuestas se realizaron en sede_1
total_sede_1 <- sum (sede_1)
total_sede_2 <-  sum (sede_2)
# ¿Dónde se contestaron más encuestas?
total_sede_1 > total_sede_2
#¿Cuál es el día con mayor cantidad de encuestas?
which.max(sede_1)
#¿Cuántas se hicieron?
sede_1[2]
#¿Cómo combino estas funciones?
#¿Cómo voy entrelazando funciones?
sede_1[which.max(sede_1)]
#¿Cuándo hay más de 75 casos
sede_1  > 75
which(sede_1 > 75)
concepto <- c("Ingresos", "Ingreso Tributario Neto", "Cobre Bruto", "Rentas de propiedad")
junio <-  c(371, 275, 466, 256, 733)
julio <-  c(414, 329, 272, 370, 786)
#1. Generar data frame
data.frame(concepto, junio, julio)
concepto <- c("Ingresos", "Ingreso Tributario Neto", "Cobre Bruto", "Rentas de propiedad", "Impuesto Global Complementario")
concepto
#Realizo nuevamente
data.frame(concepto, junio, julio)
#Realizo nuevamente
data.frame(concepto, junio, julio)
#para guardarla
ingresos_gobierno_central <- data.frame(concepto, junio, julio)
View(ingresos_gobierno_central)
str (ingresos_gobierno_central) #la estructura de la base
str (ingresos_gobierno_central) #la estructura de la base
nrow(ingresos_gobierno_central)
#Llamar a una variable de la base: $
ingresos_gobierno_central$concepto
ingresos_gobierno_central$concepto [1]
#Llamar a una variable de la base: $
ingresos_gobierno_central$concepto
