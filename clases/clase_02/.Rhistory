view ()
names(data)
#Realización
names(oscars)
unique(oscars$oscar_yr)
oscars %>% filter(name == "Leonardo Di Caprio" | name == "Al Pacino")
#05. Otras selecciones:
#seleccione:
#los que ganaron el oscar el 2017, 2018, 2019
#los mejores actores menores de 30
#seleccione dos actores que le guste y vea cuando ganaron
unique(oscars$name)
data %>% mutate(ROI = (WorldGross - Budget)/Budget) %>% view()
data %>%
mutate(ROI = (WorldGross - Budget)/Budget) %>%
arrange(desc(ROI)) %>%
view()
#02. Diferencia de ratting: películas controversiales
data %>% mutate(Dif_rating = (RottenTomatoes - AudienceScore)) %>% view()
data %>%
group_by(LeadStudio) %>%
count() %>%
arrange(desc(n)) #ordena de mayor a menor, descendente, sin desc desde menor
gapminder::gapminder %>% group_by(continent) %>% count()
oscars %>% group_by(name) %>%
count() %>%
filter (n>=2) %>%
arrange(desc(n))
#
names(oscar)
#
names(oscars)
oscars %>% group_by(movie) %>%
count() %>%
filter (n>=2) %>%
arrange(desc(n))
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE),
SD = sd (AudienceScore, na.rm = TRUE)) %>%
rename(Productora= LeadStudio) %>% view()
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE)) %>%
rename(Productora= LeadStudio) %>% view()
# 05. Summarise -----------------------------------------------------------
#suele usarse con group_by
# quiero saber el total de ganadoras por cada estudio
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE)) %>%
rename(Productora= LeadStudio) %>% view()
data %>%
group_by(LeadStudio) %>%
count() %>%
arrange(desc(n))
data %>%
filter (LeadStudio %in% c("Warner Bros. " , "Universal Pictures ",
"Lionsgate ", "Twentieth Century Fox ")) %>%
group_by(LeadStudio) %>%
summarise(Prom = mean(Budget, na.rm = TRUE),
SD = sd (Budget, na.rm = TRUE),
Total = sum (Budget, na.rm = TRUE))
xaringan:::inf_mr()
#3. Uso de pacman
#install.packages("pacman")
pacman::p_load(tidyverse,Lock5Data, openintro) #tidyverse y bases de datos de cine
#00.2 Abrimos base y asignamos base de datos
data <-  Lock5Data::HollywoodMovies
oscars <- openintro::oscars
View(data)
#observar variables
names(data) #nombre de variables de base de datos data
names(oscars) #nombre de variables de base de datos oscars
#observar categorías (unicas de variables)
unique(data$Genre)
#forma 1
data %>%
dplyr::select(Movie, LeadStudio, Genre)
#asigar
data_select <- data %>% select(Movie, LeadStudio, Genre)
names(data) #r base
data %>% names() #forma tidyverse
# observo los años de mi base data
unique(data$Year)
class(data$Year)
data %>% filter (Year ==2012) # doble igual
data %>% dplyr::filter (Year==2018)  # con::
#mayor o igual a 2016
data %>% filter (Year >= 2016) %>% view()
#filtrar por variables categóricas
data %>% filter (Genre== "Drama") %>% view() # ojo que las categóricas van con comillas
#filtrar por dos tipos de variables
data %>% filter (Genre=="Action" & Year==2013) %>% view()
#01. Diferencia de ratting: películas controversiales
data %>% mutate(Dif_rating = (RottenTomatoes - AudienceScore)) %>% view()
data %>%
group_by(LeadStudio) %>%
count() %>% #cuenta la cantidad
arrange(desc(n)) #ordena de mayor a menor, descendente, sin desc desde menor
oscars %>% group_by(name) %>%
count() %>%
filter (n>=2) %>%
arrange(desc(n))
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE)) %>% #audiencia
rename(Productora= LeadStudio) %>% view() #cambio nombre
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE)) %>% #audiencia
rename(Productora= LeadStudio) %>%
arrange(desc(n)) %>% view() #cambio nombre
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE)) %>% #audiencia
rename(Productora= LeadStudio) %>%
arrange(desc(Freq)) %>%  view() #cambio nombre
unique(data$LeadStudio)
data %>%
group_by(LeadStudio) %>%
count() %>%
arrange(desc(n))
data %>%
filter (LeadStudio %in% c("Warner Bros. " , "Universal Pictures ",
"Lionsgate ", "Twentieth Century Fox ")) %>%
group_by(LeadStudio) %>%
summarise(Prom = mean(Budget, na.rm = TRUE),
SD = sd (Budget, na.rm = TRUE),
Total = sum (Budget, na.rm = TRUE))
#2. Llamar paquetes
library(tidyverse)
#3. Uso de pacman
#install.packages("pacman")
pacman::p_load(tidyverse,Lock5Data, openintro) #tidyverse y bases de datos de cine
#00.2 Abrimos base y asignamos base de datos
data <-  Lock5Data::HollywoodMovies
oscars <- openintro::oscars
View(data)
#observar variables
names(data) #nombre de variables de base de datos data
names(oscars) #nombre de variables de base de datos oscars
#observar categorías (unicas de variables)
unique(data$Genre)
#forma 1
data %>%
dplyr::select(Movie, LeadStudio, Genre)
#forma 1
data %>%
dplyr::select(Movie, LeadStudio, Genre) %>% view ()
#forma 2
data %>% select(Movie, LeadStudio, Genre)
#forma 2
data %>% select(Movie, LeadStudio, Genre) %>% view ()
data %>% select(Movie, LeadStudio, Genre)
#asignar
data_select <- data %>% select(Movie, LeadStudio, Genre)
data %>% select(-c(Budget, WorldGross))
data %>% select(Year, everything()) %>% #pone primero Year, luego el resto
view()
#b. ordenar ####
data %>% select(LeadStudio, everything()) %>% #pone primero Year, luego el resto
view()
#c. las que comiencen con start_with ####
data %>% select(starts_with(match="M")) %>%
view()
#d. las que terminen con ends_with ####
data %>% select(ends_with(match="E")) %>%
view()
names(data) #r base
data %>% names() #forma tidyverse
# observo los años de mi base data
unique(data$Year)
class(data$Year)
data %>% filter (Year ==2012) # doble igual
data %>% dplyr::filter (Year==2018)  # con::
#mayor o igual a 2016
data %>% filter (Year >= 2016) %>% view()
#presupuesto mayor que 210
data %>% filter (Budget >=210)
#presupuesto mayor que 210
data %>% filter (Budget >=210) %>% view ()
#presupuesto mayor que 210
data %>% filter (Budget >=210) %>% view ()
#filtrar por dos tipos de variables
data %>% filter (Genre=="Action" & Year==2013) %>% view()
unique(data$Genre)
#filtrar por variables categóricas
data %>% filter (Genre== "Documentary") %>% view() # ojo que las categóricas van con comillas
#filtrar por una y otra (| al lado del 1 en pc)
data %>% filter (Genre== "Comedy"| Genre == "Drama")
#filtrar por una y otra (| al lado del 1 en pc)
data %>% filter (Genre== "Comedy"| Genre == "Drama") %>% view()
class(data$Genre)
class(data$Genre)
#01. Diferencia de ratting: películas controversiales
data %>% mutate(Dif_rating = (RottenTomatoes - AudienceScore)) %>% view()
#02. Con oscars: case_when para recodificar!
oscars %>% mutate (Mayores60 = case_when (age < 59 ~ "Menor 60",
age >= 60 ~ "Mayor 60")) %>% view()
#02. Con oscars: case_when para recodificar!
oscars %>% mutate (Mayores60 = case_when (age =< 59 ~ "Menor 60",
#02. Con oscars: case_when para recodificar!
oscars %>% mutate (Mayores60 = case_when (age <= 59 ~ "Menor 60",
age >= 60 ~ "Mayor 60")) %>% view()
#01. Diferencia de ratting: películas controversiales
data %>% mutate(Dif_rating = (RottenTomatoes - AudienceScore)) %>% view()
#02. Con oscars: case_when para recodificar!
oscars %>% mutate (Mayores60 = case_when (age <= 59 ~ "Menor 60",
age >= 60 ~ "Mayor 60")) %>% view()
#Práctica 3####
#01. Generar una variable de edad recodificada: 18 a 35, 36 a 50, 51 a 59, 60 y más.
oscars <- oscars %>%
mutate(CategoriaEdad = case_when(
age %in% 18:35  ~ "18 a 35",
age %in% 36:50  ~ "36 a 50",
age %in% 51:59  ~ "51 a 59",
age >= 60       ~ "60 y más",
TRUE            ~ "Fuera de rango" # Para cualquier edad fuera de los rangos especificados
))
#Práctica 3####
#01. Generar una variable de edad recodificada: 18 a 35, 36 a 50, 51 a 59, 60 y más.
oscars_r <- oscars %>%
mutate(CategoriaEdad = case_when(
age %in% 18:35  ~ "18 a 35",
age %in% 36:50  ~ "36 a 50",
age %in% 51:59  ~ "51 a 59",
age >= 60       ~ "60 y más",
TRUE            ~ "Fuera de rango" # Para cualquier edad fuera de los rangos especificados
))
View(oscars_r)
#01. Diferencia de ratting: películas controversiales
data %>% mutate(Dif_rating = (RottenTomatoes - AudienceScore)) %>% view()
#02. Con oscars: case_when para recodificar!
oscars %>% mutate (Mayores60 = case_when (age <= 59 ~ "Menor 60",
age >= 60 ~ "Mayor 60")) %>% view()
#Práctica 3####
#01. Generar una variable de edad recodificada: 18 a 35, 36 a 50, 51 a 59, 60 y más.
oscars_r1 <- oscars %>%
mutate(CategoriaEdad = case_when(
age %in% 18:35  ~ "18 a 35",
age %in% 36:50  ~ "36 a 50",
age %in% 51:59  ~ "51 a 59",
age >= 60       ~ "60 y más",
TRUE            ~ "Fuera de rango" # Para cualquier edad fuera de los rangos especificados
))
View(oscars_r1)
data <-  Lock5Data::HollywoodMovies
oscars <- openintro::oscars
View(data)
View(data)
# 04. Group by ----------------------------------------------------------------
# Agrupar según una variable cualitativa (ordinal, nominal), no cuantitativa
# requiere alguna operación posterior
# cuáles son los estudios con mayor cantidad de películas ganadoras
unique(data$LeadStudio)
data %>%
group_by(LeadStudio) %>%
count() %>% #cuenta la cantidad
arrange(desc(n)) %>% view () #ordena de mayor a menor, descendente, sin desc desde menor
oscars %>% group_by(name) %>%
count() %>% # cuento la cantidad oscar por actor/actriz
filter (n>=2) %>%  # filtro por personas que tengan más de dos oscar
arrange(desc(n)) %>% # ordeno de mayor a menor
view()
View(oscars)
# Agrupar por película y contabilizar las que tengan más de dos oscar
# Ojo, base de datos sólo de ganadorxs mejor actor/actriz
unique(oscars$movie)
oscars %>% group_by(movie) %>%
count() %>% # cuento la cantidad oscar por actor/actriz
filter (n>=2) %>%  # filtro por personas que tengan más de dos oscar
arrange(desc(n)) %>% # ordeno de mayor a menor
view()
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE)) %>% #audiencia
rename(Productora= LeadStudio) %>%
arrange(desc(Freq)) %>%  view() #cambio nombre
View(data)
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),  # cantidad de peliculas por estudio
Prom = mean(AudienceScore, na.rm = TRUE)) %>% # promedio de calificación de audiencia
rename(Productora= LeadStudio) %>% # renombra la variable LeadStudio y ponle Productora
arrange(desc(Freq)) %>%  view() #Ordena según cantidad de películas Freq
#seleccionando las siguientes productoras (LeadStudio):
# "Warner Bros. " , "Universal Pictures ", "Lionsgate ", "Twentieth Century Fox "
# ponga antención como están escritas.
unique(data$LeadStudio)
data %>%
group_by(LeadStudio) %>%
count() %>%
arrange(desc(n))
data %>%
filter (LeadStudio %in% c("Warner Bros. " , "Universal Pictures ",
"Lionsgate ", "Twentieth Century Fox ")) %>%
group_by(LeadStudio) %>%
summarise(Prom = mean(Budget, na.rm = TRUE),
SD = sd (Budget, na.rm = TRUE),
Total = sum (Budget, na.rm = TRUE))
tidy_anime <- read_csv(file="https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-23/tidy_anime.csv")
tidy_anime <- read_csv(file="https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-23/tidy_anime.csv")
pacman::p_load(tidyverse)
tidy_anime <- read_csv(file="https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-23/tidy_anime.csv")
View(tidy_anime)
names(tidy_anime)
unique(tidy_anime$studio)
studio_movie_count <- anime_data %>%
group_by(studio) %>%
summarise(movies_count = n()) %>%
arrange(desc(movies_count))
studio_movie_count <- tidy_anime %>%
group_by(studio) %>%
summarise(movies_count = n()) %>%
arrange(desc(movies_count))
View(studio_movie_count)
names(tidy_anime)
unique(tidy_anime$type)
studio_movie_count <- tidy_anime %>%
select(Movie)%>%
group_by(studio) %>%
summarise(movies_count = n()) %>%
arrange(desc(movies_count))
unique(tidy_anime$type)
studio_movie_count <- tidy_anime %>%
filter(type == "Movie")%>%
group_by(studio) %>%
summarise(movies_count = n()) %>%
arrange(desc(movies_count))
View(studio_movie_count)
names(tidy_anime)
unique(tidy_anime$genre)
# Carga del conjunto de datos
anime_data <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-23/tidy_anime.csv")
# Ejercicio de select con nombres de variables actualizados
# 1. Seleccionar las columnas name, genre y score
selected_columns <- anime_data %>%
select(name, genre, score)
View(selected_columns)
# 2. Seleccionar las columnas name hasta studio
range_select <- anime_data %>%
select(name:studio)
View(range_select)
# 3. Excluir las columnas related y background
exclude_columns <- anime_data %>%
select(-related, -background)
# Ejercicio de filter para Studio Ghibli
ghibli_genres <- anime_data %>%
filter(studio == "Studio Ghibli")
# Ejercicio de filter para Studio Ghibli
ghibli <- anime_data %>%
filter(studio == "Studio Ghibli")
View(ghibli)
View(anime_data)
# Carga del conjunto de datos
anime_data <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-23/tidy_anime.csv")
# Carga del conjunto de datos
anime_data <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-23/tidy_anime.csv")
anime_data_unique <- anime_data %>%
distinct(animeID, .keep_all = TRUE)
# Ejercicio de filter para Studio Ghibli
ghibli <- anime_data %>%
filter(studio == "Studio Ghibli")
View(ghibli)
names(anime_data)
anime_data_unique <- anime_data %>%
distinct(name, .keep_all = TRUE)
anime_data_unique <- anime_data %>%
distinct(name, .keep_all = TRUE)
# Ejercicio de filter para Studio Ghibli
ghibli <- anime_data %>%
filter(studio == "Studio Ghibli")
View(ghibli)
anime_data_unique <- anime_data %>%
distinct()
# Ejercicio de filter para Studio Ghibli
ghibli <- anime_data %>%
filter(studio == "Studio Ghibli")
View(ghibli)
anime_data_unique <- anime_data %>%
distinct(animeID, .keep_all = TRUE)
# Ejercicio de filter para Studio Ghibli
ghibli <- anime_data %>%
filter(studio == "Studio Ghibli")
View(ghibli)
# Carga del conjunto de datos
anime_data <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-23/tidy_anime.csv")
anime_data_unique <- anime_data %>%
distinct(animeID, .keep_all = TRUE)
View(anime_data_unique)
anime_data <- anime_data %>%
distinct(animeID, .keep_all = TRUE)
# Ejercicio de filter para Studio Ghibli
ghibli <- anime_data %>%
filter(studio == "Studio Ghibli")
View(ghibli)
# Carga del conjunto de datos
anime_data <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-23/tidy_anime.csv")
# Ejercicio de select con nombres de variables actualizados
# 1. Seleccionar las columnas name, genre y score
selected_columns <- anime_data %>%
select(name, genre, score)
# 2. Seleccionar las columnas name hasta studio
range_select <- anime_data %>%
select(name:studio)
# 3. Excluir las columnas related y background
exclude_columns <- anime_data %>%
select(-related, -background)
# 0. Observe las variables con names ()
names(anime_data)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Ejercicio de filter para Studio Ghibli y tres géneros específicos
ghibli_genres <- anime_data %>%
filter(studio == "Studio Ghibli" &
(genre %in% c("Action", "Adventure", "Fantasy")))
# Contar películas por estudio y encontrar el estudio con más películas
studio_movie_count <- anime_data %>%
filter(type == "Movie") %>%
group_by(studio) %>%
summarise(movies_count = n()) %>%
arrange(desc(movies_count))
View(studio_movie_count)
View(anime_data)
unique(anime_data$status)
# Carga de paquetes tidyverse con pacman
# install.packages("pacman")
pacman::p_load(tidyverse)
# Carga del conjunto de datos
datos_anime <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-23/tidy_anime.csv")
# Ejecutar esta limpieza para evitar casos repetidos
datos_anime <- datos_anime %>%
distinct(animeID, .keep_all = TRUE)
# 0. Observar las variables con names()
nombres(datos_anime)
# 0. Observar las variables con names()
names (datos_anime)
# 1. Seleccionar las columnas name, genre y score. Guarda esta selección como base: columnas_seleccionadas
columnas_seleccionadas <- datos_anime %>%
select(name, genre, score)
# 2. Seleccionar las columnas name hasta studio. Guarda esta selección como base: seleccion_rango
seleccion_rango <- datos_anime %>%
select(name:studio)
# 3. Excluir las columnas related y background. Guarda esta selección como base: excluir_columnas
excluir_columnas <- datos_anime %>%
select(-related, -background)
# 1. Filtrar para quedarse solo con el Studio Ghibli, primero observar cuáles son los estudios en la variable studio con unique(). Guarda este filtro como base: ghibli
ghibli <- datos_anime %>%
filter(studio == "Studio Ghibli")
# 2. Para el Studio Ghibli, quedarse solo con los géneros "Action", "Adventure", "Fantasy". Guarda este filtro como base: ghibli_generos
ghibli_generos <- datos_anime %>%
filter(studio == "Studio Ghibli" &
(genre %in% c("Action", "Adventure", "Fantasy")))
# 3. Filtrar animes que aún se están emitiendo. Guarda este filtro como base: emitiendose
emitiendose <- datos_anime %>%
filter(status == "Currently Airing")
emitiendose <- datos_anime %>%
filter(status == "Currently Airing")
View(emitiendose)
unique(datos_anime$score)
etiqueta_puntuacion <- datos_anime %>%
mutate(categoria_puntuacion = case_when(
score >= 8 ~ "Alto",
score >= 6 & score < 8 ~ "Medio",
TRUE ~ "Bajo"
))
unique(datos_anime$popularity)
max(datos_anime$popularity)
clasificacion_popularidad <- datos_anime %>%
mutate(nivel_popularidad = case_when(
popularity <= 10000 ~ "Muy popular",
popularity <= 5000 & popularity > 10000 ~ "Popular",
TRUE ~ "Menos popular"
))
table(clasificacion_popularidad$nivel_popularidad)
max(datos_anime$popularity)
clasificacion_popularidad <- datos_anime %>%
mutate(nivel_popularidad = case_when(
popularity <= 15000 ~ "Muy popular",
popularity ==  5000:14999 ~ "Popular",
TRUE ~ "Menos popular"
))
clasificacion_popularidad <- datos_anime %>%
mutate(nivel_popularidad = case_when(
popularity <= 15000 ~ "Muy popular",
popularity >= 5000 & popularity <= 14999 ~ "Popular",
TRUE ~ "Menos popular"
))
table(clasificacion_popularidad$nivel_popularidad)
mean(datos_anime$popularity)
clasificacion_popularidad <- datos_anime %>%
mutate(nivel_popularidad = case_when(
popularity <= 8000 ~ "Muy popular",
popularity >= 5000 & popularity <= 7999 ~ "Popular",
TRUE ~ "Menos popular"
))
table(clasificacion_popularidad$nivel_popularidad)
etiqueta_puntuacion <- datos_anime %>%
mutate(categoria_puntuacion = case_when(
score >= 8 ~ "Alto",
score >= 6 & score < 8 ~ "Medio",
TRUE ~ "Bajo"
))
table(etiqueta_puntuacion$categoria_puntuacion)
