xaringan:::inf_mr()
xaringan:::inf_mr()
pacman::p_load(tidyverse,Lock5Data, openintro) #tidyverse y bases de datos de cine
data %>%
select (Movie, LeadStudio, Genre)
pacman::p_load(tidyverse,Lock5Data, openintro) #tidyverse y bases de datos de cine
#00.2 Abrimos base y asignamos base de datos
data <-  Lock5Data::HollywoodMovies
oscars <- openintro::oscars
View(data)
#observar variables
names(data)
names(data)
names(oscars)
#observar categorías (unicas de variables)
unique(data$Genre)
unique(data$Genre)
names(data)
#forma 1
data %>%
dplyr::select(Movie, LeadStudio, Genre)
#forma 2
data %>% select(Movie, LeadStudio, Genre)
#asingar
data_select <- data %>% select(Movie, LeadStudio, Genre)
View(data_select)
#b. ordenar
data %>% select(Year, everything()) %>% #pone primero Year, luego el resto
view()
data %>% select(-c(Budget, WorldGross))
#c. las que comiencen con start_with
data %>% select(starts_with(match="M"))
#c. las que comiencen con start_with
data %>% select(starts_with(match="M")) %>%
view()
#d. las que comiencen con start_with
data %>% select(ends_with(match="E")) %>%
view()
#d. las que terminen con ends_with
data %>% select(ends_with(match="E")) %>%
view()
#e. las que son numéricas
data %>% select_if(is.numeric)
#f. las que son categóricas
data %>% select_if(is.character)
#f. transformar a mayúsculas
data %>% select_all(toupper)
#realización:
#01.
oscars %>% names () #observo nombre de variables
oscars %>% head () #primera mirada de datos
#02.
oscars %>% select(c(2,4,6))
#03.
oscars %>% select(-c(1,6))
o2 <-  oscars %>% select(!starts_with("birth"))%>%
view ()
names(data)
#Realización
names(oscars)
unique(oscars$oscar_yr)
oscars %>% filter(name == "Leonardo Di Caprio" | name == "Al Pacino")
#05. Otras selecciones:
#seleccione:
#los que ganaron el oscar el 2017, 2018, 2019
#los mejores actores menores de 30
#seleccione dos actores que le guste y vea cuando ganaron
unique(oscars$name)
data %>% mutate(ROI = (WorldGross - Budget)/Budget) %>% view()
data %>%
mutate(ROI = (WorldGross - Budget)/Budget) %>%
arrange(desc(ROI)) %>%
view()
#02. Diferencia de ratting: películas controversiales
data %>% mutate(Dif_rating = (RottenTomatoes - AudienceScore)) %>% view()
data %>%
group_by(LeadStudio) %>%
count() %>%
arrange(desc(n)) #ordena de mayor a menor, descendente, sin desc desde menor
gapminder::gapminder %>% group_by(continent) %>% count()
oscars %>% group_by(name) %>%
count() %>%
filter (n>=2) %>%
arrange(desc(n))
#
names(oscar)
#
names(oscars)
oscars %>% group_by(movie) %>%
count() %>%
filter (n>=2) %>%
arrange(desc(n))
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE),
SD = sd (AudienceScore, na.rm = TRUE)) %>%
rename(Productora= LeadStudio) %>% view()
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE)) %>%
rename(Productora= LeadStudio) %>% view()
# 05. Summarise -----------------------------------------------------------
#suele usarse con group_by
# quiero saber el total de ganadoras por cada estudio
data %>%
group_by(LeadStudio) %>%
summarise(Freq = n(),
Prom = mean(AudienceScore, na.rm = TRUE)) %>%
rename(Productora= LeadStudio) %>% view()
data %>%
group_by(LeadStudio) %>%
count() %>%
arrange(desc(n))
data %>%
filter (LeadStudio %in% c("Warner Bros. " , "Universal Pictures ",
"Lionsgate ", "Twentieth Century Fox ")) %>%
group_by(LeadStudio) %>%
summarise(Prom = mean(Budget, na.rm = TRUE),
SD = sd (Budget, na.rm = TRUE),
Total = sum (Budget, na.rm = TRUE))
xaringan:::inf_mr()
