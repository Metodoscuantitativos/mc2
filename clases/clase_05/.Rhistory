base_covid <- readRDS(file = "fuente/base_covid_sample.RDS")
#02. Supongan que sólo les interesa trabajar con las variables edad, clasificacion_resumen y  fallecido.
# para saber los nombres utilice función names ()
# Utilice el método de acceso de los corchetes [] para crear un nuevo objeto que contenga:
# a) todas las filas de la base,
# b) pero solo esas columnas
#02.1 realicelo con el nombre de las variables (base_covid_r1)
#02.2 realicelo con la posición de las variables (base_covid_r2)
#02.3 observe si son iguales
names(base_covid)
base_covid_r1 <- base_covid [, c("edad", "clasificacion_resumen", "fallecido")]
base_covid_r2 <- base_covid [, c(3, 21, 15)]
View(base_covid_r2)
View(base_covid_r1)
base_covid_r3 <- base_covid [1:200,]
#06. Borre todos los objetos del Environment
rm(ls)
#06. Borre todos los objetos del Environment
rm(ls())
#06. Borre todos los objetos del Environment
rm(list=ls())
base_covid <- readRDS(file = "fuente/base_covid_sample.RDS")
#01. Importar la base de datos de casos COVID (base_covid_sample.RDS) y cargar tidyverse
#asignela con el nombre base_covid
library(tidyverse)
names(base_covid)
base_covid %>%
dplyr::select(sexo, 3, starts_with(match = "fecha"), ends_with(match = "id"), contains(match = nombre))
base_covid %>%
dplyr::select(sexo, 3, starts_with(match = "fecha"), ends_with(match = "id"), contains(match = "nombre"))
base_covid2 <- base_covid %>%
dplyr::select(sexo, 3, starts_with(match = "fecha"), ends_with(match = "id"), contains(match = "nombre"))
names(base_covid)
unique(base_covid$residencia_provincia_nombre)
base_covid3 <- base_covid %>%
filter(residencia_provincia_nombre %in% c("CABA", "Mendoza", "Córdoba"),
edad >= 18)
#04. mediante la función table () observe si su filtro está bien realizado para residencia_provincia_nombre
table(base_covid_r3$residencia_provincia_nombre)
table(base_covid3$residencia_provincia_nombre)
#0.5 mediante la función table () observe si su filtro está bien realizado para edad
table(base_covid3$edad)
base_covid %>%
mutate (edadr = case_when(edad <18 ~ "1 a 17",
edad %in% c(18:34) ~ "18 a 34",
edad %in% c(35:64)~ "35 a 64",
edad >64 ~ "65 o más"))
base_covid4 <- base_covid %>%
mutate (edadr = case_when(edad <18 ~ "1 a 17",
edad %in% c(18:34) ~ "18 a 34",
edad %in% c(35:64)~ "35 a 64",
edad >64 ~ "65 o más"))
View(base_covid4)
#07. compruebe lo realizado con una table() a edadr
table(base_covid4$edadr)
pregrado <- c(140, 70, 20, 120, 240)
postgrado <- c(24, 50, 12, 40, 80)
pregrado
postgrado
anios <- c("2017", "2018", "2019", "2020", "2021")
anios
names(pregrado) <- anios
names(postgrado) <- anios
pregrado
postgrado
pregrado > postgrado
pregrado == postgrado
sum(pregrado)
sum(postgrado)
Candidato <- c("Kast", "Boric")
Votos <- c("64000", "78000")
Mesas <- c("Mesa1", "Mesa1")
opcion_2 <- data.frame(Candidato, Votos, Mesas)
opcion_2
Conteo <- opcion_2
kableExtra::kable(Conteo)
library(kable)
kableExtra::kable(Conteo)
kableExtra::kable(Conteo)
Conteo
kableExtra::kable(Conteo)
install.packages("kable")
library(kable)
library(kable)
install.packages("kable")
library(kable)
library(kableExtra)
kableExtra::kable(Conteo)
library(kableExtra)
opcion_2 <- data.frame(Candidato, Votos, Mesas)
opcion_2
kableExtra::kable(Conteo)
kableExtra::kable(Conteo)
kableExtra::kable(Conteo)
View(Conteo)
Conteo[1, c("Candidato", "Votos", "Mesas")]
a <- c(1:10)
b <- c(1, 5, 200, 500)
c <-  c(1.5, 2.5, 4, 5.6)
as.double(c)
c <- as.double(c)
c <- as.double(c)
c <-  c(1.5, 2.5, 5.6)
names(b) <- c("primero", "segundo", "tercero", "cuarto")
a <- c(1:10)
b <- c(1, 5, 200, 500)
c <- c(30, 35, 26, 47)
names(b) <- c("antropologia", "sociologia", "geografía", "historia")
#2. Tipo character
nombres <- c ("pedro", "juan", "diego")
#3. Factor
factor = factor(c("orange", "red", "yellow"))
#3. Factor
factor <-  factor(c("orange", "red", "yellow"))
#4. Lógico
lógico = c(FALSE, FALSE, TRUE, TRUE)
#Coerción explícita
x <- as.numeric(2,4,6,8,10)
#Coerción explícita
x <- as.numeric(2,4,6,8,10)
y <- as.factor(c("ABC1", "C2", "C3", "D", "E"))
#Coerción explícita
x <- as.numeric(c(2,4,6,8,10))
y <- as.factor(c("ABC1", "C2", "C3", "D", "E"))
z <- as.logical(c(TRUE, TRUE, FALSE))
t <- as.Date("22-10-2020")
q <- as.character(c("Valparaíso", "Santiago", "Viña del Mar"))
class(t)
#class(): identificar el tipo de objeto
class(t)
as.character(x)
x <- as.character(x)
Candidato <- c("Kast", "Boric")
Votos <- c("64000", "78000")
Mesas <- c("Mesa1", "Mesa1")
opcion_2 <- data.frame(Candidato, Votos, Mesas)
opcion_2
as.tibble(opcion_2)
library(tidtverse)
library(tidyverse)
as_tibble(opcion_2)
kableExtra::kable(opcion_2)
library(kableExtra)
kableExtra::kable(opcion_2)
class(opcion_2)
as_tibble(opcion_2)
pcion_2
opcion_2
as.tbl(opcion_2)
tibble::as_tibble(opcion_2)
class(opcion_2)
tibble::as.tibble(opcion_2)
class(opcion_2)
opcion_2 <- data.frame(Candidato, Votos, Mesas)
opcion_2
class(opcion_2)
#lista
mi.lista <- list("letras" = letters[1:4], opcion_2 = opcion_2)
View(mi.lista)
#lista
mi.lista <- list("letras" <-  letters[1:4], opcion_2 <-  opcion_2, numeros <- c(1,2,3))
View(mi.lista)
View(mi.lista)
#acceso
mi.lista [[1]]
mi.lista [[3]]
mi.lista [[2]]
class(mi.lista [[2]])
class(mi.lista [[3]])
class(mi.lista [[1]])
mi.lista[["letras"]]
mi.lista[["letra"]]
mi.lista[["letras"]]
mi.lista[[letras]]
mi.lista[["letras"]]
mi.lista$letras
View(mi.lista)
# lista:
# objeto que puede almacenar muchos tipos de datos
mi.lista <- list("letras" =  letters[1:4], opcion_2 =  opcion_2, numeros = c(1,2,3))
View(mi.lista)
mi.lista_mal <- list("letras" <-   letters[1:4], opcion_2 <-  opcion_2, numeros <- c(1,2,3))
View(mi.lista_mal)
View(mi.lista)
View(mi.lista_mal)
mi.lista$letras
mi.lista[["letras"]]
mi.lista[["opcion_2"]]
#3. Factor: se suele usa para variables categóricas
factor <-  factor(c("orange", "red", "yellow"))
factor
genero <- c(1,2,2,2,1,2,1,99,99)
genero_f <- factor(genero, labels = c("Hombre", "Mujer", NA)) #Importancia del error (cantidad valores)
table(genero_f)
#tidyverse
Conteo %>%
select(2)
Candidato <- c("Kast", "Boric")
Votos <- c("64000", "78000")
Mesas <- c("Mesa1", "Mesa1")
opcion_2 <- data.frame(Candidato, Votos, Mesas)
opcion_2
Conteo <- opcion_2
#tidyverse
Conteo %>%
select(2)
Conteo %>%
select(Votos)
Conteo %>%
slice(1) %>%
select(2,3)
#2. Seleccionar la fila 1 y columna 1 y 2.
Conteo[1, c(1,2)]
Conteo %>%
slice(1) %>%
select(1,2)
xaringan:::inf_mr()
# Clase 5 - Data Wrangling 2
# 03. Procesamiento de base de datos --------------------------------------
# install.packages("pacman")
pacman::p_load(tidyverse,# Universo de paquetes : tidyr, dplyr, ggplot2,readr,purrr,tibble, stringr, forcats
openxlsx,#leer archivos xlsx
readxl,# leer archivos xl      #dos formatos de excel xlsx y xl
janitor,#limpieza de datos
writexl,#Guardar tablas formato excel
DataExplorer) #Exploración rápida
#Importar el archivo y asignarlo en el environment----
base_antropologia <- read.xlsx(" Encuesta-Estudiantes-Antropología-(respuestas).xlsx")
# install.packages("pacman")
pacman::p_load(tidyverse,# Universo de paquetes : tidyr, dplyr, ggplot2,readr,purrr,tibble, stringr, forcats
openxlsx,#leer archivos xlsx
readxl,# leer archivos xl      #dos formatos de excel xlsx y xl
janitor,#limpieza de datos
writexl,#Guardar tablas formato excel
DataExplorer) #Exploración rápida
#Importar el archivo y asignarlo en el environment----
base_antropologia <- read.xlsx("Encuesta-Estudiantes-Antropología-(respuestas).xlsx")
